declare const audioRecorderProcessor: "\nclass AudioProcessor extends AudioWorkletProcessor {\n    encodeBase64(bytes) {\n        const base64abc = [\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\n            'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n            'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n        ];\n\n        let result = '';\n        let i;\n        const l = bytes.length;\n        for (i = 2; i < l; i += 3) {\n            result += base64abc[bytes[i - 2] >> 2];\n            result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];\n            result += base64abc[((bytes[i - 1] & 0x0f) << 2) | (bytes[i] >> 6)];\n            result += base64abc[bytes[i] & 0x3f];\n        }\n        if (i === l + 1) { // 1 octet yet to write\n            result += base64abc[bytes[i - 2] >> 2];\n            result += base64abc[(bytes[i - 2] & 0x03) << 4];\n            result += '==';\n        }\n        if (i === l) { // 2 octets yet to write\n            result += base64abc[bytes[i - 2] >> 2];\n            result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];\n            result += base64abc[(bytes[i - 1] & 0x0f) << 2];\n            result += '=';\n        }\n        return result;\n    }\n\n    process(inputs, outputs, parameters) {\n        const input = inputs[0];\n        if (input && input[0]) {\n            const inputData = input[0];\n            const rawAudioData = new Float32Array(inputData.length);\n            rawAudioData.set(inputData);\n\n            // Convert the audio data to a Uint8Array for base64 encoding\n            const uint8Array = new Uint8Array(rawAudioData.buffer);\n\n            // Use the custom base64 encoding function\n            const base64String = this.encodeBase64(uint8Array);\n\n            // Send the base64 string to the main thread via the port\n            this.port.postMessage({ event: 'media', streamSid: 'WEBSDK', media: { payload: base64String } });\n        }\n\n        return true;\n    }\n}\n\nregisterProcessor('audio-processor', AudioProcessor);\n";
