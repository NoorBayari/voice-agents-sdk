declare const audioProcessorURL: "\nclass AudioPlayerProcessor extends AudioWorkletProcessor {\n    constructor() {\n        super();\n        this.audioData = [];\n        this.isPaused = false;\n        this.marks = [];\n        this.isDone = false;\n\n        this.port.onmessage = (event) => {\n            if (event.data.type === 'enqueue') {\n                this.audioData.push(...event.data.audioSamples);\n                this.isPaused = false;\n                this.isDone = false;\n            } else if (event.data.type === 'pause') {\n                this.isPaused = true;\n            } else if (event.data.type === 'resume') {\n                this.isPaused = false;\n            } else if (event.data.type === 'addMark') {\n                this.marks.push(event.data.markName);\n            } else if (event.data.type === 'clear') {\n                this.clearAllData();\n            }\n        };\n    }\n\n    clearAllData() {\n        this.audioData = []; // Clear the audio data buffer\n        this.marks = []; // Clear any pending marks\n        this.isPaused = true; // Optionally, pause processing to ensure no data is played\n    }\n\n    process(inputs, outputs) {\n        const output = outputs[0];\n\n        if (this.isPaused) {\n            for (let channel = 0; channel < output.length; channel++) {\n                output[channel].fill(0); // Output silence if paused or cleared\n            }\n            return true;\n        }\n\n        for (let channel = 0; channel < output.length; channel++) {\n            const outputData = output[channel];\n            const inputData = this.audioData.splice(0, outputData.length);\n\n            if (inputData.length > 0) {\n                outputData.set(inputData);\n            } else {\n                outputData.fill(0); // Output silence when no data is available\n            }\n        }\n        if (this.audioData.length === 0 && !this.isDone) {\n            this.isDone = true; \n            this.port.postMessage({ type: 'finished' });\n        }\n\n        // Process marks if all audio data has been played\n        if (this.marks.length > 0 && this.audioData.length === 0) {\n            const mark_name = this.marks.shift();\n            this.port.postMessage({ type: 'mark', markName: mark_name });\n        }\n\n\n\n        return true; // Keep the processor active\n    }\n}\n\nregisterProcessor('audio-player-processor', AudioPlayerProcessor);\n";
